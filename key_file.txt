
# Yemen Market Analysis Dashboard - Detailed Repository Structure and Key Files Guide

```
├── .babelrc                 # Babel configuration for JavaScript transpilation
├── .env                     # Environment variables configuration
├── .eslintrc.js             # ESLint configuration for code quality
├── .gitattributes           # Git attributes specification
├── .github
│   └── workflows
│       ├── ci-cd.yml        # GitHub Actions workflow for CI/CD
│       └── deploy.yml       # GitHub Actions workflow for deployment
├── .gitignore               # Specifies intentionally untracked files to ignore
├── .nvmrc                   # Specifies the Node.js version for the project
├── 404.html                 # Custom 404 error page
├── LICENSE                  # Project license information
├── README.md                # Project overview and setup instructions
├── SECURITY.md              # Security policy and vulnerability reporting
├── config-overrides.js      # Configuration overrides for Create React App
├── data                     # Directory for raw data files
├── environment.yml          # Conda environment specification
├── external_data
│   └── naturalearth_lowres
│       ├── ne_110m_admin_0_countries.VERSION.txt
│       ├── ne_110m_admin_0_countries.cpg
│       ├── ne_110m_admin_0_countries.dbf
│       ├── ne_110m_admin_0_countries.prj
│       ├── ne_110m_admin_0_countries.shp
│       └── ne_110m_admin_0_countries.shx
├── map_git_repo.py          # Python script to generate the repository structure
├── package-lock.json        # Locked versions of npm packages
├── package.json             # Project dependencies and scripts
├── project
│   ├── Methedology.txt      # Description of analysis methodology
│   ├── config
│   │   └── config.yaml      # Configuration for Python scripts
│   ├── data
│   │   ├── processed
│   │   │   ├── enhanced_unified_data_with_residual.geojson
│   │   │   ├── unified_data.geojson
│   │   │   ├── unified_data.json
│   │   │   └── unified_data.parquet
│   │   └── weights
│   │       └── global_spatial_weights.pkl
│   ├── ecm_analysis
│   │   ├── ecm_analysis.py
│   │   ├── ecm_analysis_v2.py
│   │   ├── ecm_analysis_v3.py
│   │   ├── ecm_analysis_v4.py
│   │   ├── ecm_v2.5_directional.py
│   │   └── v2.5_unified.py
│   ├── market_integration_index
│   │   └── compute_tv_mii.py
│   ├── price_diffrential_analysis
│   │   ├── price_differential_model.py
│   │   └── price_differential_model_v2.py
│   ├── spatial_analysis
│   │   ├── data_prepration_for_spatial_chart.py
│   │   └── spatial_model.py
│   └── utils
│       ├── common_utils.py
│       └── data_utils.py
├── public
│   ├── favicon.ico          # Favicon for the website
│   ├── index.html           # HTML template for the React app
│   ├── logo192.png          # Logo image for PWA
│   ├── logo512.png          # Larger logo image for PWA
│   ├── manifest.json        # Web app manifest file
│   ├── results              # Mirror of analysis results for frontend access
│   │   ├── choropleth_data
│   │   ├── ecm
│   │   ├── network_data
│   │   ├── price_diff_results
│   │   ├── spatial_weights
│   │   └── time_series_data
│   └── robots.txt           # Instructions for web crawlers
├── requirements.txt         # Python dependencies
├── results                  # Output data from various analyses
│   ├── choropleth_data
│   ├── ecm
│   ├── logs
│   ├── network_data
│   ├── price_diff_results
│   ├── residuals_data
│   ├── spatial_weights
│   └── time_series_data
├── scripts
│   └── prepareData.js       # Script to prepare data for the frontend
├── src
│   ├── App.js               # Main React component
│   ├── Dashboard.js         # Dashboard component
│   ├── Dashboard.test.js    # Tests for Dashboard component
│   ├── ErrorBoundary.js     # Error boundary component for React
│   ├── components
│   │   ├── common
│   │   │   ├── CommoditySelector.js
│   │   │   ├── ECMTabs.js
│   │   │   ├── ErrorMessage.js
│   │   │   ├── Header.js
│   │   │   ├── LoadingSpinner.js
│   │   │   ├── RegimeSelector.js
│   │   │   ├── Sidebar.js
│   │   │   └── TabPanel.js
│   │   ├── ecm-analysis
│   │   │   ├── DiagnosticsTable.js
│   │   │   ├── ECMAnalysis.js
│   │   │   ├── GrangerCausalityChart.js
│   │   │   ├── IRFChart.js
│   │   │   ├── ResidualsChart.js
│   │   │   ├── SpatialAutocorrelationChart.js
│   │   │   └── SummaryTable.js
│   │   ├── methodology
│   │   │   ├── CodeBlock.js
│   │   │   ├── MethodologyModal.js
│   │   │   └── MethodologySection.js
│   │   ├── price-differential-analysis
│   │   │   ├── DiagnosticsTests.js
│   │   │   ├── MarketPairInfo.js
│   │   │   ├── PriceDifferentialAnalysis.js
│   │   │   ├── PriceDifferentialChart.js
│   │   │   └── RegressionResults.js
│   │   └── spatial-analysis
│   │       ├── DiagnosticsTests.js
│   │       ├── RegressionResults.js
│   │       ├── SpatialAnalysis.js
│   │       └── SpatialMap.js
│   ├── hooks
│   │   ├── useData.js
│   │   ├── useDataLoading.js
│   │   ├── useECMDataHooks.js
│   │   ├── usePriceDifferentialData.js
│   │   └── useSpatialData.js
│   ├── index.css            # Global CSS styles
│   ├── index.js             # Entry point for the React app
│   ├── setupTests.js        # Test setup file
│   ├── store
│   │   └── index.js         # Redux store configuration
│   ├── styles
│   │   ├── CustomStyles.js
│   │   ├── GlobalStyle.js
│   │   ├── LayoutStyles.js
│   │   └── theme.js
│   └── utils
│       ├── api.js
│       ├── chartSetup.js
│       ├── dataPath.js
│       ├── dataProcessing.js
│       ├── dataSourceUtil.js
│       ├── ecmSlice.js
│       ├── formatNumber.js
│       ├── i18n.js
│       ├── jsonToCsv.js
│       ├── layout.js
│       ├── methodologyData.js
│       ├── priceDiffSlice.js
│       ├── spatialSlice.js
│       ├── stringUtils.js
│       └── themeSlice.js
└── webpack.config.js        # Webpack configuration for bundling
```

## Additional Key Files and Their Functions

1. **project/data/processed/**
   - Contains various data formats (geojson, json, parquet) for processed unified data, enhancing flexibility in data usage.

2. **project/ecm_analysis/**
   - Multiple versions of ECM analysis scripts (v2, v3, v4, v2.5_directional, v2.5_unified) showing the evolution and different approaches to ECM analysis.

3. **project/utils/**
   - `common_utils.py` and `data_utils.py` provide shared utility functions for data processing and analysis.

4. **public/results/**
   - Mirror of the results directory, organized into subdirectories for different types of analysis outputs, making them accessible to the frontend.

5. **src/components/common/**
   - Houses reusable UI components like `CommoditySelector.js`, `ECMTabs.js`, `LoadingSpinner.js`, etc., promoting code reusability.

6. **src/components/ecm-analysis/**
   - Contains specialized components for ECM analysis visualization, including charts for different aspects of the analysis.

7. **src/components/methodology/**
   - Components for displaying methodology information, including `MethodologyModal.js` for a pop-up explanation.

8. **src/hooks/**
   - Custom React hooks for data fetching and management, including specific hooks for ECM, price differential, and spatial data.

9. **src/utils/**
   - Various utility functions and Redux slices (`ecmSlice.js`, `priceDiffSlice.js`, `spatialSlice.js`) for state management and data processing.

## Key Updates and Their Significance

1. **Diverse Data Formats**: The presence of multiple data formats in `project/data/processed/` indicates flexibility in data handling and storage.

2. **Iterative ECM Analysis**: Multiple versions of ECM analysis scripts show an iterative development process, potentially addressing different aspects or improvements in the analysis.

3. **Comprehensive Frontend Structure**: The `src/components/` directory shows a well-organized frontend with clear separation of concerns for different analysis types and common components.

4. **Advanced State Management**: The presence of Redux slices in `src/utils/` suggests a sophisticated state management approach for different aspects of the application.

5. **Methodology Explanation**: The inclusion of methodology-specific components indicates an emphasis on explaining the analysis methods to users.

6. **Internationalization**: The presence of `i18n.js` in `src/utils/` suggests preparation for multi-language support.

