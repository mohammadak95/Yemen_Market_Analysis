Yemen Market Analysis Dashboard - Repository Structure and Key Files Guide

├── .babelrc
├── .env
├── .eslintrc.js
├── .gitattributes
├── .github
│   └── workflows
│       ├── ci-cd.yml
│       └── deploy.yml
├── .gitignore
├── .nvmrc
├── LICENSE
├── README.md
├── config-overrides.js
├── data
├── external_data
│   └── naturalearth_lowres
│       ├── ne_110m_admin_0_countries.VERSION.txt
│       ├── ne_110m_admin_0_countries.cpg
│       ├── ne_110m_admin_0_countries.dbf
│       ├── ne_110m_admin_0_countries.prj
│       ├── ne_110m_admin_0_countries.shp
│       └── ne_110m_admin_0_countries.shx
├── key_file.txt
├── map_git_repo.py
├── package-lock.json
├── package.json
├── project
│   ├── config
│   │   └── config.yaml
│   ├── data
│   │   ├── processed
│   │   │   ├── enhanced_unified_data_with_residual.geojson
│   │   │   ├── enhanced_unified_data_with_residuals.geojson
│   │   │   ├── unified_data.geojson
│   │   │   └── unified_data.json
│   │   └── weights
│   │       └── global_spatial_weights.pkl
│   ├── ecm_analysis
│   │   ├── ecm_analysis.py
│   │   └── ecm_analysis_v2.py
│   ├── price_diffrential_analysis
│   │   ├── price_differential_model.py
│   │   └── price_differential_model_v2.py
│   ├── spatial_analysis
│   │   ├── data_prepration_for_spatial_chart.py
│   │   └── spatial_model.py
│   └── utils
│       ├── common_utils.py
│       └── data_utils.py
├── public
│   ├── favicon.ico
│   ├── index.html
│   ├── logo192.png
│   ├── logo512.png
│   ├── manifest.json
│   └── robots.txt   

├── requirements.txt
├── results
│   ├── choropleth_data
│   │   ├── average_prices.csv
│   │   ├── conflict_intensity.csv
│   │   ├── price_changes.csv
│   │   └── residuals.csv
│   ├── ecm
│   │   └── ecm_analysis_results.json
│   ├── enhanced_unified_data_with_residual.geojson
│   ├── network_data
│   │   └── flow_maps.csv
│   ├── price_diff_results
│   │   └── price_differential_results.json
│   ├── residuals_data
│   ├── spatial_analysis_results.json
│   ├── spatial_weights
│   │   └── spatial_weights.json
│   └── time_series_data
│       ├── conflict_intensity_time_series.csv
│       └── prices_time_series.csv
├── scripts
│   └── prepareData.js
├── src
│   ├── App.js
│   ├── components
│   │   ├── CommoditySelector.js
│   │   ├── InteractiveChart.js
│   │   ├── RegimeSelector.js
│   │   └── common
│   │       ├── ErrorBoundary.js
│   │       ├── ErrorMessage.js
│   │       ├── Footer.js
│   │       ├── Header.js
│   │       ├── LoadingSpinner.js
│   │       ├── Sidebar.js
│   │       └── ThemeToggle.js
│   ├── features
│   │   └── themeSlice.js
│   ├── hooks 
│   │   ├── useData.js 
│   │   └── useDataLoader.js
│   ├── index.css
│   ├── index.js
│   ├── setupTests.js
│   ├── store
│   │   └── index.js
│   ├── styles
│   │   ├── GlobalStyle.js
│   │   └── theme.js
│   └── utils
│       ├── dataPath.js
│       └── dataSourceUtil.js
└── webpack.config.js

Repository Structure Overview

The project is organized into several key directories:

* .github/workflows/: Contains CI/CD and deployment configuration files.
* data/: Stores raw data files (if any).
* external_data/: Contains external datasets, including Natural Earth data.
* project/: Houses the Python backend code for data analysis.
* public/: Stores static assets for the React application.
* results/: Contains output data from various analyses, including the GeoJSON file.
* scripts/: Includes utility scripts like data preparation.
* src/: Contains the React application source code.

Key Files and Their Purposes

Root Directory

* .babelrc: Babel configuration for JavaScript transpilation, including styled-components plugin.
* .env: Environment variables configuration.
* .eslintrc.js: ESLint configuration for code quality.
* .gitattributes: Git attributes specification.
* .gitignore: Specifies intentionally untracked files to ignore.
* .nvmrc: Specifies the Node.js version for the project.
* config-overrides.js: Configuration overrides for Create React App.
* LICENSE: Project license information.
* README.md: Project overview and setup instructions.
* map_git_repo.py: Python script to generate the repository structure.
* package.json: Defines project dependencies, scripts, and Jest configuration.
* requirements.txt: Lists Python dependencies.
* webpack.config.js: Webpack configuration for bundling.
* jest.config.js: Configuration for Jest testing framework.

project/ Directory

* config/config.yaml: Configuration for the Python backend.
* data/processed/: Contains processed GeoJSON and JSON data files.
* ecm_analysis/: Scripts for Error Correction Model analysis.
* price_differential_analysis/: Scripts for Price Differential analysis.
* spatial_analysis/: Scripts for Spatial analysis and data preparation.
* utils/: Utility functions for data processing.

public/ Directory

Contains static assets for the React application, including index.html, favicon, and manifest.

results/ Directory

Stores output data from various analyses:

* choropleth_data/: CSV files for choropleth visualizations.
* ecm/: JSON results from ECM analysis.
* network_data/: CSV files for network visualizations.
* price_diff_results/: JSON results from price differential analysis.
* spatial_weights/: JSON file with spatial weights information.
* time_series_data/: CSV files with time series data.
* enhanced_unified_data_with_residual.geojson: GeoJSON file containing unified data with residuals.

scripts/ Directory

* prepareData.js: Script to prepare data for the frontend.

src/ Directory

React application source code:

* components/:
    * common/: Common components (ErrorBoundary, ErrorMessage, Footer, Header, LoadingSpinner, Sidebar, ThemeToggle)
    * InteractiveChart.js: Component for rendering the main interactive chart.
    * CommoditySelector.js: Component for selecting commodities.
    * RegimeSelector.js: Component for selecting regimes.
* hooks/: Custom hooks for data fetching.
    * useData.js: Fetches the main dataset.
    * useDataLoader.js: (Optional) Can be used for fetching other data.
* features/:
    * themeSlice.js: Redux slice for theme management.
* store/: Redux store configuration.
* styles/: Global styles and theme configuration.
* utils/:
    * dataPath.js: Utility function to construct paths for data files.
    * dataSourceUtil.js: Utility for data source management.
* App.js: Main application component.
* index.js: Main entry point for the React application.
* setupTests.js: Configuration for test environment.

Key Functions and Components

Backend (Python)

* ECM Analysis: `load_data()`, `run_stationarity_tests()`, `estimate_ecm()`, etc.
* Price Differential Analysis: `prepare_market_data()`, `analyze_market_pair()`, etc.
* Spatial Analysis: `load_geojson()`, `create_spatial_weights()`, `run_spatial_analysis()`, etc.

Frontend (React)

* Main Components: App, InteractiveChart, CommoditySelector, RegimeSelector
* Common Components: Header, Footer, Sidebar, ThemeToggle
* Redux Slices: themeSlice
* Utility Functions: getDataPath in dataPath.js, functions in dataSourceUtil.js
* Custom Hooks: useData, useDataLoader

Development and Deployment

* CI/CD: Configured in .github/workflows/ci-cd.yml
* Deployment: GitHub Pages deployment configured in .github/workflows/ci-cd.yml
* Local Development: Use npm start or npm run dev to start the development server
* Build: Use npm run build to create a production build
Data Preparation: npm run prepare-data copies necessary data (including the new GeoJSON file) to the build directory
Testing: Use npm test to run tests

Additional Notes

The project now focuses on a single interactive chart component that displays data from the GeoJSON file.
The sidebar now contains commodity and regime selectors instead of navigation links.
The data loading process has been updated to work with the new GeoJSON file structure.
The InteractiveChart component now processes GeoJSON features to create datasets suitable for charting.
CommoditySelector and RegimeSelector components now fetch their options dynamically from the GeoJSON file.
The project maintains compatibility with both local development and GitHub Pages deployment through the updated data loading approach.
Styled-components is used for CSS-in-JS styling.
The project uses a custom webpack configuration for bundling.